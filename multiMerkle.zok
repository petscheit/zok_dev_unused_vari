import "hashes/sha256/512bitPadded" as sha256
import "hashes/sha256/1024bitPadded" as sha256_4
import "utils/casts/u32_to_field" as to_field
import "utils/pack/u32/nonStrictUnpack256" as to_u32_8

struct Balance {
	field ethAmount
	field tokenAmount
	field nonce
	u32[5] address
}

def hashPair(u32[8] a, u32[8] b) -> (u32[8]):
	return if to_field(a[0]) <= to_field(b[0]) then sha256(a, b) else sha256(b, a) fi

def hashLeafs(Balance[3] balances) -> (u32[3][8]): // TODO: use sha-2 spec padding
	u32[3][8] res = [[0x00000000;8];3]
	u32[8] padding = [0x00000000;8]
	for field i in 0..3 do
		u32[8] temp = sha256_4(to_u32_8(balances[i].ethAmount), to_u32_8(balances[i].tokenAmount), to_u32_8(balances[i].nonce), padding)
		res[i] = temp
	endfor
	return res

def getPosition(bool proofFlag, field leafPos, field leafsLen) -> (field):
	return if proofFlag then if leafPos < leafsLen then 0 else 1 fi else 2 fi
	
def verifyMultiProof(u32[9][8] leafs, u32[9][8] proofs, bool[9] proofFlags) -> (u32[8]):
	field leafsLen = 3
	field totalHashes = 9
	u32[9][8] hashes = [[0x00000000;8];9]
	field[3] indexes = [0, 0, 0] // 0: leafPos, 1: hashPos, 2: proofPos
	for field i in 0..totalHashes do
		u32[3][8] nodes = [leafs[indexes[0]], hashes[indexes[1]], proofs[indexes[2]]]
		field aPos = getPosition(proofFlags[i], indexes[0], leafsLen)
		u32[8] a = nodes[aPos]
		indexes[aPos] = indexes[aPos] + 1

		nodes = [leafs[indexes[0]], hashes[indexes[1]], proofs[indexes[2]]]
		field bPos = getPosition(true, indexes[0], leafsLen)
		u32[8] b = nodes[bPos]
		indexes[bPos] = indexes[bPos] + 1
		u32[8] hash = hashPair(a, b)
		hashes[i] = hash
	endfor
	return hashes[totalHashes - 1]

def hashFinalBalances(Balance[3] balances) -> (u32[8]):
	u32[8] dummyBlock = [0x80000000, ...[0x00000000;6], 0x00000300]
	u32[3] paddingAddress = [0x80000000, 0x00000000, 0x000003A0]
	return sha256_4( \
		sha256_4(to_u32_8(balances[0].ethAmount), to_u32_8(balances[0].tokenAmount), to_u32_8(balances[0].nonce), [...balances[0].address, ...paddingAddress]), \
		sha256_4(to_u32_8(balances[1].ethAmount), to_u32_8(balances[1].tokenAmount), to_u32_8(balances[1].nonce), [...balances[1].address, ...paddingAddress]), \
		sha256_4(to_u32_8(balances[2].ethAmount), to_u32_8(balances[2].tokenAmount), to_u32_8(balances[2].nonce), [...balances[2].address, ...paddingAddress]), \
		dummyBlock)

// def main(private Balance[3] oldBalances, private Balance[3] newBalances, private u32[9][8] proof, private bool[9] proofFlags, private u32[8] root) -> (u32[8], u32[8]):
def main() -> (u32[8], u32[8]):
	Balance[3] oldBalances = [Balance{ethAmount:0,tokenAmount:1000000000000000,nonce:1,address:[0x31b87891,0x8679d9DA,0x1DB277B1,0xA2fD67Aa,0x01032920]},Balance{ethAmount:1000000000000,tokenAmount:0,nonce:1,address:[0x1D539b71,0x7035B802,0x40d6e783,0x6B2C752E,0x204B7DD4]},Balance{ethAmount:5000000000000,tokenAmount:0,nonce:1,address:[0x4d9b01D7,0x11c90883,0x3f97ea78,0xCF2AE0C7,0x74607a4d]}]
	Balance[3] newBalances = [Balance{ethAmount:4901960784314,tokenAmount:900000000000000,nonce:2,address:[0x31b87891,0x8679d9DA,0x1DB277B1,0xA2fD67Aa,0x01032920]},Balance{ethAmount:0,tokenAmount:20400000000000,nonce:2,address:[0x1D539b71,0x7035B802,0x40d6e783,0x6B2C752E,0x204B7DD4]},Balance{ethAmount:3000000000000,tokenAmount:40800000000000,nonce:2,address:[0x4d9b01D7,0x11c90883,0x3f97ea78,0xCF2AE0C7,0x74607a4d]}]
	u32[9][8] proof = [[0x38723a2e,0x5e8a17aa,0x7950dc00,0x8209944e,0x898f69a7,0xbd10a23c,0x839d341e,0x935fd5ca],[0x477076ae,0xafdb714b,0x192777b7,0x70ecb909,0xea1a7fa9,0xdb8dc3b5,0x944eb392,0xf23b6753],[0x96210185,0xc14a51d9,0xe128282b,0xcae13d53,0xbf1fd6db,0x271c61ba,0x2f55097f,0x58ddc810],[0x61c2de2f,0xbb276034,0xf5d1eeb6,0x1bf1ea40,0x2265a19f,0x666c1d1a,0x723da1fd,0xc61d0558],[0xed87d3b7,0x63f55601,0x8550be2b,0xa92fa8a8,0x7a43779f,0x1b3ed7de,0x7a4ba3d7,0x0f1d8c8a],[0xa4bda860,0xe599d115,0x4e42ef9f,0x191996aa,0xd401752c,0x26e89853,0x3c43d625,0x2da4b967],[0x16b6d44f,0xceb9d925,0xac4d1ba5,0xae90d9a2,0x50a5c7e1,0xaf71501a,0x31351408,0x7fda6b19],[0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000],[0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000]]
	bool[9] proofFlags = [false,true,true,false,false,false,false,false,false]
	u32[8] root = [0x097dc8eb,0x36b33e61,0xd502f549,0x5919d241,0xe3a84c9c,0x169ac017,0xba227fd8,0xda9a52ac]

	u32[9][8] leafsPadded = [...hashLeafs(oldBalances), ...[[0x00000000;8];6]] // we need to pass empty leafs for this to compile. The proof flags will ensure that these values are never used for hashing
	assert(root == verifyMultiProof(leafsPadded, proof, proofFlags)) // passed trades contain correct balances. First check OK
	u32[9][8] newLeafsPadded = [...hashLeafs(newBalances), ...[[0x00000000;8];6]]
	u32[8] newRoot = verifyMultiProof(newLeafsPadded, proof, proofFlags)

	return newRoot, hashFinalBalances(newBalances)